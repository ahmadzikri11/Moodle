{"version":3,"sources":["../../../src/local/content/actions.js"],"names":["name","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","TOGGLER","ADDSECTION","classes","DISABLED","state","addEventListener","element","_dispatchClick","_checkSectionlist","CourseEvents","sectionRefreshed","watch","handler","event","target","closest","classList","contains","preventDefault","methodName","_actionMethodName","dataset","action","requestName","charAt","toUpperCase","slice","_setAddSectionLocked","course","sectionlist","length","maxsections","sectionId","id","sectionInfo","reactive","get","exporter","getExporter","data","sectionid","sectiontitle","title","modalParams","body","Templates","render","_modalBodyRenderedPromise","modal","modalBody","getBody","currentElement","querySelector","_disableLink","generalSection","matches","for","getAttribute","dispatch","destroy","cmId","cmInfo","cmid","cmname","click","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","cmList","hassummary","rawtitle","saveButtonText","type","ModalFactory","types","SAVE_CANCEL","getRoot","on","ModalEvents","save","e","locked","targets","getElements","forEach","toggle","setElementLocked","style","pointerEvents","userSelect","add","setAttribute","Promise","resolve","reject","create","then","bodyRendered","setSaveButtonText","show","catch","BaseComponent"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport {getList} from 'core/normalise';\nimport * as CourseEvents from 'core_course/events';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            TOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `disabled`,\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const methodName = this._actionMethodName(target.dataset.action);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target section id and title.\n        data.sectionid = sectionInfo.id;\n        data.sectiontitle = sectionInfo.title;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursesection', 'core'),\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element and section zero.\n        const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n        this._disableLink(currentElement);\n        const generalSection = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-number='0']`);\n        this._disableLink(generalSection);\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n            this.reactive.dispatch('sectionMove', [sectionId], target.dataset.id);\n            modal.destroy();\n        });\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target cm info.\n        data.cmid = cmInfo.id;\n        data.cmname = cmInfo.name;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursemodule', 'core'),\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element.\n        let currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n        this._disableLink(currentElement);\n\n        // Open the cm section node if possible.\n        currentElement.closest(this.selectors.SECTIONNODE)?.querySelector(this.selectors.TOGGLER)?.click();\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            // Get draggable data from cm or section to dispatch.\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n\n            this.reactive.dispatch('cmMove', [cmId], targetSectionId, targetCmId);\n            modal.destroy();\n        });\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        const cmList = sectionInfo.cmlist ?? [];\n        if (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle) {\n            // We need confirmation if the section has something.\n            const modalParams = {\n                title: getString('confirm', 'core'),\n                body: getString('confirmdeletesection', 'moodle', sectionInfo.title),\n                saveButtonText: getString('delete', 'core'),\n                type: ModalFactory.types.SAVE_CANCEL,\n            };\n\n            const modal = await this._modalBodyRenderedPromise(modalParams);\n\n            modal.getRoot().on(\n                ModalEvents.save,\n                e => {\n                    // Stop the default save button behaviour which is to close the modal.\n                    e.preventDefault();\n                    modal.destroy();\n                    this.reactive.dispatch('sectionDelete', [sectionId]);\n                }\n            );\n            return;\n        } else {\n            // We don't need confirmation to delete empty sections.\n            this.reactive.dispatch('sectionDelete', [sectionId]);\n        }\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalFactory.create(modalParams).then((modal) => {\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n}\n"],"file":"actions.min.js"}